{"version":3,"sources":["images/koes-nadi.jpg","components/QuestionCard.styles.ts","Api.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","isCorrect","isClicked","QuestionCard","callback","choices","question","questionNo","totalQuestions","userAnswer","className","dangerouslySetInnerHTML","__html","map","choice","correctAnswer","key","answer","disabled","onClick","value","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","isGameOver","setIsGameOver","isLoading","setIsLoading","number","setNumber","questions","setQuestions","score","setScore","userAnswers","setUserAnswers","startTrivia","EASY","newQuestions","length","e","currentTarget","prev","answerObject","undefined","TOTAL_QUESTIONS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6b5b286.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/koes-nadi.9d2a7e67.jpg\";","import styled from \"styled-components\"\n\ntype ButtonWrapperProps = {\n  isCorrect: boolean\n  isClicked: boolean\n}\n\nexport const Wrapper = styled.div`\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  max-width: 1100px;\n  padding: 20px;\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`\n\nexport const ButtonWrapper = styled.div`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    background: ${({isCorrect, isClicked}: ButtonWrapperProps) =>\n      isCorrect\n        ? \"linear-gradient(90deg, #56ffa4, #59bc96)\"\n        : !isCorrect && isClicked\n          ? \"linear-gradient(90deg, #ff5656, #c16868)\"\n          : \"linear-gradient(90deg, #56ccff, #63afb4)\"};\n    border: 3px solid #fff;\n    border-radius: 10px;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    color: #000;\n    cursor: pointer;\n    font-size: 0.8rem;\n    height: 40px;\n    margin: 5px 0;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\n    user-select: none;\n    width: 100%;\n  }\n`\n","import { shuffleArray } from \"./utils\"\n// import \"regenerator-runtime/runtime\"\n\nexport enum Difficulty {\n  EASY   = \"easy\",\n  MEDIUM = \"medium\",\n  HARD   = \"hard\"\n}\n\nexport type Question = {\n  category:          string\n  correct_answer:    string\n  difficulty:        string\n  incorrect_answers: string[]\n  question:          string\n  type:              string\n}\n\nexport type QuestionState = Question & { answer: string[] }\n\nexport const fetchQuizQuestions = async (\n  amount:     number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}`\n  // const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\n  const data = await (await fetch(endpoint)).json()\n\n  return data.results.map((question: Question) => (\n    {\n      ...question,\n      answer: shuffleArray([\n        ...question.incorrect_answers,\n        question.correct_answer\n      ])\n    }\n  ))\n}\n","import React from \"react\"\nimport { Answer } from \"../App\"\nimport { ButtonWrapper, Wrapper } from \"./QuestionCard.styles\"\n\ntype Props = {\n  callback:       (e: React.MouseEvent<HTMLButtonElement>) => void\n  choices:        string[]\n  question:       string\n  questionNo:     number\n  totalQuestions: number\n  userAnswer?:    Answer\n}\n\nexport const QuestionCard: React.FC<Props> = ({\n  callback,\n  choices,\n  question,\n  questionNo,\n  totalQuestions,\n  userAnswer,\n}) => (\n  <Wrapper>\n    <p className=\"number\">\n      Question: {questionNo} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {choices.map(choice => (\n        <ButtonWrapper\n          isCorrect={userAnswer?.correctAnswer === choice}\n          key={choice}\n          isClicked={userAnswer?.answer === choice} >\n            <button disabled={!!userAnswer} onClick={callback} value={choice}>\n              <span dangerouslySetInnerHTML={{ __html: choice }} />\n            </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n)\n","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5)\n","import styled, { createGlobalStyle } from \"styled-components\"\nimport BGImage from \"./images/koes-nadi.jpg\"\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    display: flex;\n    justify-content: center;\n    margin: 0;\n    padding: 0 20px;\n  }\n  * {\n    box-sizing: border-box;\n    font-family: \"Catamaran\", sans-serif;\n  }\n`\n\nexport const Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  > p {\n    color: #fff;\n  }\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n  h1 {\n    background-clip: text;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-family: \"Fascinate Inline\", cursive;\n    font-size: 70px;\n    font-weight: 400;\n    margin: 20px;\n    text-align: center;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n  .start {\n    max-width: 200px;\n  }\n  .start, .next {\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    border-radius: 10px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    cursor: pointer;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n`\n","import React, { useState } from \"react\"\nimport { QuestionCard } from \"./components/QuestionCard\"\nimport { Difficulty, QuestionState, fetchQuizQuestions } from \"./Api\"\nimport { GlobalStyle, Wrapper } from \"./App.styles\"\n\nexport type Answer = {\n  answer:        string\n  correctAnswer: string\n  isCorrect:     boolean\n  question:      string\n}\n\nconst TOTAL_QUESTIONS = 10\n\nconst App = () => {\n  const [isGameOver, setIsGameOver] = useState(true)\n  const [isLoading, setIsLoading] = useState(false)\n  const [number, setNumber] = useState(0)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [score, setScore] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<Answer[]>([])\n\n\n  const startTrivia = async () => {\n    setIsLoading(true)\n    setIsGameOver(false)\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestions)\n    setNumber(0)\n    setScore(0)\n    setUserAnswers([])\n    setIsLoading(false)\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!isGameOver) {\n      const answer = e.currentTarget.value\n      const isCorrect = questions[number].correct_answer === answer\n      if (isCorrect) setScore(prev => prev + 1)\n\n      const answerObject = {\n        answer,\n        correctAnswer: questions[number].correct_answer,\n        isCorrect,\n        question: questions[number].question\n      }\n\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    const question = number + 1\n    if (question === TOTAL_QUESTIONS) {\n      setIsGameOver(true)\n    } else {\n      setNumber(question)\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {(isGameOver || userAnswers.length === TOTAL_QUESTIONS) && (\n          <button className=\"start\" onClick={startTrivia}>Start</button>\n        )}\n        {!isGameOver && <p className=\"score\">Score: {score}</p>}\n        {isLoading && <p>Loading Questions ...</p>}\n        {!isLoading && !isGameOver && (\n          <QuestionCard\n            callback={checkAnswer}\n            choices={questions[number].answer}\n            question={questions[number].question}\n            questionNo={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n          />\n        )}\n        {!isGameOver && !isLoading && (userAnswers.length === number + 1) && (number !== TOTAL_QUESTIONS - 1) && (\n          <button className=\"next\" onClick={nextQuestion}>Next</button>\n        )}\n      </Wrapper>\n    </>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}