{"version":3,"sources":["images/koes-nadi.jpg","utils.ts","Api.ts","components/CategoryCard.styles.ts","components/CategoryCard.tsx","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","minutesOfTime","time","Math","floor","shuffleArray","array","sort","random","sortArray","prop","a","b","trimString","string","trim","split","OpenTDB","file","uri","fetchQuizCategories","fetch","json","data","categoryArray","trivia_categories","map","id","name","indexOf","fetchQuizCount","category","difficulty","query","console","log","category_question_count","Difficulty","fetchQuizQuestions","amount","results","question","answer","incorrect_answers","correct_answer","Wrapper","styled","div","CategoryCard","amountList","amountOnChange","amountValue","categoryList","categoryOnChange","categoryValue","difficultyOnChange","difficultyValue","isAmountDisabled","amountOptions","key","value","categoryOptions","difficultyOptions","toUpperCase","onChange","disabled","ButtonWrapper","isCorrect","isClicked","QuestionCard","callback","choices","questionNo","totalQuestions","userAnswer","className","dangerouslySetInnerHTML","__html","choice","correctAnswer","onClick","GlobalStyle","createGlobalStyle","BGImage","isDisabled","COUNTDOWN","easy","medium","hard","DEFAULT","App","useState","isGameOver","setIsGameOver","isLoadingCount","setIsLoadingCount","isLoadingQuestions","setIsLoadingQuestions","setAmount","setAmountList","setCategory","setCategoryList","countdown","setCountdown","setDifficulty","number","setNumber","questions","setQuestions","score","setScore","userAnswers","setUserAnswers","useEffect","getCategories","handleAmountList","timer","setInterval","checkAnswer","clearInterval","categories","newAmountList","count","i","push","length","startTrivia","newQuestions","e","currentTarget","prev","answerObject","Countdown","minutes","seconds","parseInt","target","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8563bbc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/koes-nadi.9d2a7e67.jpg\";","export const minutesOfTime = (time: number) => Math.floor((time - 1) / 60)\r\n\r\nexport const secondsOfTime = (time: number) => time - minutesOfTime(time) * 60 - 1\r\n\r\nexport const shuffleArray = (array: any[]) => array.sort(() => Math.random() - 0.5)\r\n\r\nexport const sortArray = (array: any[], prop: string) => array.sort((a, b) => (a[prop] > b[prop] ? 1 : -1))\r\n\r\nexport const trimString = (string: string, trim: string) => string.split(trim)[1]\r\n","import { sortArray, shuffleArray, trimString } from \"./utils\"\r\n\r\nconst OpenTDB = (file?: string) => {\r\n  let uri = \"https://opentdb.com/api\"\r\n  if (file) uri += `_${file}`\r\n  uri += \".php\"\r\n\r\n  return uri\r\n}\r\n\r\nexport type Category = {\r\n  id:   number\r\n  name: string\r\n}\r\n\r\nexport const fetchQuizCategories = async () => {\r\n  const data = await (await fetch(OpenTDB(\"category\"))).json()\r\n  const categoryArray: Category[] = data.trivia_categories.map(({ id, name }: Category) => {\r\n    if (name.indexOf(\": \") > -1) {\r\n      name = trimString(name, \": \")\r\n    }\r\n\r\n    return { id, name }\r\n  })\r\n\r\n  return sortArray(categoryArray, \"name\")\r\n}\r\n\r\nexport type QuizCount = {\r\n  category:   number\r\n  difficulty: string\r\n}\r\n\r\nexport const fetchQuizCount = async ({\r\n  category,\r\n  difficulty\r\n}: QuizCount) => {\r\n  let query = `/?category=${category}`\r\n  console.log(`Fetch Count: ${query}&difficulty=${difficulty}`)\r\n\r\n  const data = await (await fetch(OpenTDB(\"count\") + query)).json()\r\n\r\n  return data.category_question_count[`total_${difficulty}_question_count`]\r\n}\r\n\r\nexport const Difficulty = [\"easy\", \"medium\", \"hard\"]\r\n\r\nexport type Question = {\r\n  category:          string\r\n  correct_answer:    string\r\n  difficulty:        string\r\n  incorrect_answers: string[]\r\n  question:          string\r\n  type:              string\r\n}\r\n\r\nexport type QuestionState = Question & { answer: string[] }\r\n\r\nexport type QuizQuestions = QuizCount & { amount: number }\r\n\r\nexport const fetchQuizQuestions = async ({\r\n  amount,\r\n  category,\r\n  difficulty\r\n}: QuizQuestions) => {\r\n  let query = `/?amount=${amount}&`\r\n  if (category) query += `category=${category}&`\r\n  query += `difficulty=${difficulty}`\r\n  console.log(`Fetch Questions: ${query}`)\r\n\r\n  const data = await (await fetch(OpenTDB() + query)).json()\r\n  const array = data.results.map((question: Question) => {\r\n    let category = question.category\r\n    if (category.indexOf(\": \") > -1) {\r\n      category = trimString(category, \": \")\r\n    }\r\n\r\n    return {\r\n      ...question,\r\n      category,\r\n      answer: shuffleArray([\r\n        ...question.incorrect_answers,\r\n        question.correct_answer\r\n      ])\r\n    }\r\n  })\r\n\r\n  return shuffleArray(array)\r\n}\r\n","import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.div`\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  max-width: 1100px;\r\n  padding: 20px;\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n    label, select {\r\n      width: 100%;\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Category, Difficulty } from \"../Api\"\r\nimport { Wrapper } from \"./CategoryCard.styles\"\r\n\r\ntype Props = {\r\n  amountList:         number[]\r\n  amountOnChange:     (e: React.ChangeEvent<HTMLSelectElement>) => void\r\n  amountValue:        number\r\n  categoryList:       Category[]\r\n  categoryOnChange:   (e: React.ChangeEvent<HTMLSelectElement>) => void\r\n  categoryValue:      number\r\n  difficultyOnChange: (e: React.ChangeEvent<HTMLSelectElement>) => void\r\n  difficultyValue:    string\r\n  isAmountDisabled:   boolean\r\n}\r\n\r\nexport const CategoryCard: React.FC<Props> = ({\r\n  amountList,\r\n  amountOnChange,\r\n  amountValue,\r\n  categoryList,\r\n  categoryOnChange,\r\n  categoryValue,\r\n  difficultyOnChange,\r\n  difficultyValue,\r\n  isAmountDisabled\r\n}) => {\r\n  let amountOptions = amountList.map(amount => (\r\n    <option key={amount} value={amount}>{amount}</option>\r\n  ))\r\n  let categoryOptions = categoryList.map(({ id, name }) => (\r\n    <option key={id} value={id}>{name}</option>\r\n  ))\r\n  const difficultyOptions = Difficulty.map(difficulty => (\r\n    <option key={difficulty} value={difficulty}>{difficulty.toUpperCase()}</option>\r\n  ))\r\n\r\n  return (\r\n    <Wrapper>\r\n      <p>\r\n        <label>Category : </label>\r\n        <select onChange={categoryOnChange} value={categoryValue}>\r\n          <option value={0}>Any</option>\r\n          {categoryOptions}\r\n        </select>\r\n      </p>\r\n      <p>\r\n        <label>Difficulty : </label>\r\n        <select onChange={difficultyOnChange} value={difficultyValue}>{difficultyOptions}</select>\r\n      </p>\r\n      <p>\r\n        <label>No. of Questions : </label>\r\n        <select disabled={isAmountDisabled} onChange={amountOnChange} value={amountValue}>{amountOptions}</select>\r\n      </p>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import styled from \"styled-components\"\r\n\r\ntype ButtonWrapperProps = {\r\n  isCorrect: boolean\r\n  isClicked: boolean\r\n}\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    background: ${({isCorrect, isClicked}: ButtonWrapperProps) =>\r\n      isCorrect\r\n        ? \"linear-gradient(90deg, #56ffa4, #59bc96)\"\r\n        : !isCorrect && isClicked\r\n          ? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n          : \"linear-gradient(90deg, #56ccff, #63afb4)\"};\r\n    border: 3px solid #fff;\r\n    border-radius: 10px;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    color: #000;\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\r\n    user-select: none;\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  max-width: 1100px;\r\n  padding: 20px;\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Answer } from \"../App\"\r\nimport { ButtonWrapper, Wrapper } from \"./QuestionCard.styles\"\r\n\r\ntype Props = {\r\n  callback:       (e: React.MouseEvent<HTMLButtonElement>) => void\r\n  choices:        string[]\r\n  question:       string\r\n  questionNo:     number\r\n  totalQuestions: number\r\n  userAnswer?:    Answer\r\n}\r\n\r\nexport const QuestionCard: React.FC<Props> = ({\r\n  callback,\r\n  choices,\r\n  question,\r\n  questionNo,\r\n  totalQuestions,\r\n  userAnswer,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNo} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {choices.map(choice => (\r\n        <ButtonWrapper\r\n          isCorrect={userAnswer?.correctAnswer === choice}\r\n          key={choice}\r\n          isClicked={userAnswer?.answer === choice} >\r\n            <button disabled={!!userAnswer} onClick={callback} value={choice}>\r\n              <span dangerouslySetInnerHTML={{ __html: choice }} />\r\n            </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n)\r\n","import styled, { createGlobalStyle } from \"styled-components\"\r\nimport BGImage from \"./images/koes-nadi.jpg\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: \"Catamaran\", sans-serif;\r\n  }\r\n`\r\n\r\ntype WrapperProps = {\r\n  isDisabled: boolean\r\n}\r\n\r\nexport const Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score, .category {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    background-clip: text;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-family: \"Fascinate Inline\", cursive;\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    margin: 20px;\r\n    text-align: center;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n  }\r\n  .start, .next {\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    border-radius: 10px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    cursor: pointer;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    background: ${({ isDisabled }: WrapperProps) =>\r\n      isDisabled && \"linear-gradient(180deg, #fff, rgba(255, 204, 145, 0.75))\"};\r\n    border-color: ${({ isDisabled }: WrapperProps) =>\r\n      isDisabled && \"rgba(211, 133, 88, 0.75)\"};\r\n    cursor: ${({ isDisabled }: WrapperProps) =>\r\n      isDisabled && \"default\"};\r\n  }\r\n`\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { CategoryCard } from \"./components/CategoryCard\"\r\nimport { QuestionCard } from \"./components/QuestionCard\"\r\nimport {\r\n  Category, QuestionState,\r\n  fetchQuizCategories, fetchQuizCount, fetchQuizQuestions\r\n} from \"./Api\"\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\"\r\nimport { minutesOfTime, secondsOfTime } from \"./utils\"\r\n\r\nconst COUNTDOWN: { [x: string]: number } = {\r\n  easy:   16,\r\n  medium: 21,\r\n  hard:   26\r\n}\r\n\r\nconst DEFAULT = {\r\n  AMOUNT:       5,\r\n  AMOUNT_LIST:  [5, 10, 15, 20],\r\n  COUNTDOWN:    0,\r\n  NUMBER:       0,\r\n  SCORE:        0,\r\n  USER_ANSWERS: []\r\n}\r\n\r\nexport type Answer = {\r\n  answer:        string\r\n  correctAnswer: string\r\n  isCorrect:     boolean\r\n  question:      string\r\n}\r\n\r\nconst App = () => {\r\n  const [isGameOver, setIsGameOver] = useState(true)\r\n  const [isLoadingCount, setIsLoadingCount] = useState(false)\r\n  const [isLoadingQuestions, setIsLoadingQuestions] = useState(false)\r\n  const [amount, setAmount] = useState(DEFAULT.AMOUNT)\r\n  const [amountList, setAmountList] = useState(DEFAULT.AMOUNT_LIST)\r\n  const [category, setCategory] = useState(0)\r\n  const [categoryList, setCategoryList] = useState<Category[]>([])\r\n  const [countdown, setCountdown] = useState(DEFAULT.COUNTDOWN)\r\n  const [difficulty, setDifficulty] = useState(\"easy\")\r\n  const [number, setNumber] = useState(DEFAULT.NUMBER)\r\n  const [questions, setQuestions] = useState<QuestionState[]>([])\r\n  const [score, setScore] = useState(DEFAULT.SCORE)\r\n  const [userAnswers, setUserAnswers] = useState<Answer[]>(DEFAULT.USER_ANSWERS)\r\n\r\n  useEffect(() => {\r\n    getCategories()\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    handleAmountList() // eslint-disable-next-line\r\n  }, [category, difficulty])\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      if (countdown === 0) {\r\n        checkAnswer()\r\n      }\r\n\r\n      setCountdown(countdown - 1)\r\n    }, 1000)\r\n\r\n    return () => clearInterval(timer)\r\n  }, [countdown])\r\n\r\n  const getCategories = async () => {\r\n    const categories = await fetchQuizCategories()\r\n\r\n    setCategoryList(categories)\r\n  }\r\n\r\n  const handleAmountList = async () => {\r\n    setIsLoadingCount(true)\r\n\r\n    let newAmountList = DEFAULT.AMOUNT_LIST\r\n    if (category) {\r\n      const count:number = await fetchQuizCount({\r\n        category,\r\n        difficulty\r\n      })\r\n\r\n      newAmountList = [DEFAULT.AMOUNT]\r\n      for (let i = 10;i <= 20;i += 5) {\r\n        if (i > count) break\r\n        newAmountList.push(i)\r\n      }\r\n    }\r\n\r\n    if (amountList.length !== newAmountList.length) {\r\n      setAmount(DEFAULT.AMOUNT)\r\n      setAmountList(newAmountList)\r\n    }\r\n\r\n    setIsLoadingCount(false)\r\n  }\r\n\r\n  const startTrivia = async () => {\r\n    if (!number) {\r\n      setIsLoadingQuestions(true)\r\n      setIsGameOver(false)\r\n\r\n      const newQuestions = await fetchQuizQuestions({\r\n        amount,\r\n        category,\r\n        difficulty\r\n      })\r\n\r\n      setCountdown(COUNTDOWN[difficulty])\r\n      setQuestions(newQuestions)\r\n      setUserAnswers(DEFAULT.USER_ANSWERS)\r\n      setIsLoadingQuestions(false)\r\n    } else {\r\n      setIsGameOver(true)\r\n      setNumber(DEFAULT.NUMBER)\r\n    }\r\n\r\n    setScore(DEFAULT.SCORE)\r\n  }\r\n\r\n  const checkAnswer = (e?: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!isGameOver) {\r\n      let answer = \"\"\r\n      let isCorrect = false\r\n      if (e) {\r\n        answer = e.currentTarget.value\r\n        isCorrect = questions[number].correct_answer === answer\r\n        if (isCorrect) setScore(prev => prev + 1)\r\n      }\r\n\r\n      const answerObject = {\r\n        answer,\r\n        correctAnswer: questions[number].correct_answer,\r\n        isCorrect,\r\n        question: questions[number].question\r\n      }\r\n\r\n      setCountdown(DEFAULT.COUNTDOWN)\r\n      setUserAnswers(prev => [...prev, answerObject])\r\n    }\r\n  }\r\n\r\n  const nextQuestion = () => {\r\n    setCountdown(COUNTDOWN[difficulty])\r\n    setNumber(number + 1)\r\n  }\r\n\r\n  const Countdown = () => {\r\n    const minutes = minutesOfTime(countdown)\r\n    const seconds = secondsOfTime(countdown)\r\n\r\n    return (\r\n      <h1>\r\n        {`${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`}\r\n      </h1>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper isDisabled={isLoadingCount}>\r\n        <h1>TRIVIA QUIZ</h1>\r\n        {(countdown > 0) && <Countdown />}\r\n        {(isGameOver || userAnswers.length === amount) && (\r\n          <button\r\n            className=\"start\"\r\n            disabled={isLoadingCount}\r\n            onClick={startTrivia} >\r\n              {!number ? \"Start\" : \"New Game\"}\r\n          </button>\r\n        )}\r\n        {!isGameOver && <p className=\"score\">Score: {score}</p>}\r\n        {!isGameOver && !isLoadingQuestions && <p className=\"category\">Category: {questions[number].category}</p>}\r\n        {isLoadingQuestions && <p>Loading Questions ...</p>}\r\n        {isGameOver ? (\r\n          <CategoryCard\r\n            amountList={amountList}\r\n            amountOnChange={e => setAmount(parseInt(e.target.value))}\r\n            amountValue={amount}\r\n            categoryList={categoryList}\r\n            categoryOnChange={e => setCategory(parseInt(e.target.value))}\r\n            categoryValue={category}\r\n            difficultyOnChange={e => setDifficulty(e.target.value)}\r\n            difficultyValue={difficulty}\r\n            isAmountDisabled={isLoadingCount}\r\n          />\r\n        ) : !isLoadingQuestions && (\r\n          <QuestionCard\r\n            callback={checkAnswer}\r\n            choices={questions[number].answer}\r\n            question={questions[number].question}\r\n            questionNo={number + 1}\r\n            totalQuestions={amount}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n          />\r\n        )}\r\n        {!isGameOver && !isLoadingQuestions && (userAnswers.length === number + 1) && (number !== amount - 1) && (\r\n          <button className=\"next\" onClick={nextQuestion}>Next</button>\r\n        )}\r\n      </Wrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}