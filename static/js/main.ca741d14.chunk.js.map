{"version":3,"sources":["images/koes-nadi.jpg","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","Api.ts","App.styles.ts","components/CategoryCard.styles.ts","components/CategoryCard.tsx","App.tsx","index.tsx"],"names":["module","exports","Wrapper","styled","div","ButtonWrapper","isCorrect","isClicked","QuestionCard","callback","choices","question","questionNo","totalQuestions","userAnswer","className","dangerouslySetInnerHTML","__html","map","choice","correctAnswer","key","answer","disabled","onClick","value","sortArray","array","prop","sort","a","b","trimString","string","trim","split","fetchQuizCategories","fetch","json","data","categoryArray","trivia_categories","category","name","indexOf","Difficulty","fetchQuizQuestions","amount","difficulty","console","log","endpoint","results","incorrect_answers","correct_answer","Math","random","GlobalStyle","createGlobalStyle","BGImage","CategoryCard","amountOnChange","categoryOnChange","difficultyOnChange","list","amountOptions","categoryOptions","id","difficultyOptions","toUpperCase","onChange","App","useState","isGameOver","setIsGameOver","isLoading","setIsLoading","setAmount","setCategory","categoryList","setCategoryList","setDifficulty","number","setNumber","questions","setQuestions","score","setScore","userAnswers","setUserAnswers","useEffect","getCategories","categories","startTrivia","newQuestions","length","e","parseInt","target","currentTarget","prev","answerObject","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,uC,m6BCOpC,IAAMC,EAAUC,IAAOC,IAAV,KAaPC,EAAgBF,IAAOC,IAAV,KAMR,gBAAEE,EAAF,EAAEA,UAAWC,EAAb,EAAaA,UAAb,OACZD,EACI,4CACCA,GAAaC,EACZ,2CACA,8CClBCC,EAAgC,SAAC,GAAD,IAC3CC,EAD2C,EAC3CA,SACAC,EAF2C,EAE3CA,QACAC,EAH2C,EAG3CA,SACAC,EAJ2C,EAI3CA,WACAC,EAL2C,EAK3CA,eACAC,EAN2C,EAM3CA,WAN2C,OAQ3C,kBAACZ,EAAD,KACE,uBAAGa,UAAU,UAAb,aACaH,EADb,MAC4BC,GAE5B,uBAAGG,wBAAyB,CAAEC,OAAQN,KACtC,6BACGD,EAAQQ,KAAI,SAAAC,GAAM,OACjB,kBAACd,EAAD,CACEC,WAAqB,OAAVQ,QAAU,IAAVA,OAAA,EAAAA,EAAYM,iBAAkBD,EACzCE,IAAKF,EACLZ,WAAqB,OAAVO,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,UAAWH,GAChC,4BAAQI,WAAYT,EAAYU,QAASf,EAAUgB,MAAON,GACxD,0BAAMH,wBAAyB,CAAEC,OAAQE,a,OCjC1CO,EAAY,SAACC,EAAcC,GAAf,OAAgCD,EAAME,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEF,GAAQG,EAAEH,GAAQ,GAAK,MAI3FI,EAAa,SAACC,EAAgBC,GAAjB,OAAkCD,EAAOE,MAAMD,GAAM,ICGlEE,EAAmB,uCAAG,8BAAAN,EAAA,4DAChB,uCADgB,SAEPO,MADT,wCADgB,8BAEUC,OAFV,cAE3BC,EAF2B,OAG3BC,EAA4BD,EAAKE,kBAAkBvB,KAAI,SAACwB,GAC5D,IAAIC,EAAOD,EAASC,KAKpB,OAJIA,EAAKC,QAAQ,OAAS,IACxBD,EAAOX,EAAWW,EAAM,OAGnB,2BACFD,GADL,IAEEC,YAX6B,kBAe1BjB,EAAUc,EAAe,SAfC,2CAAH,qDAkBnBK,EAAa,CAAC,OAAQ,SAAU,QAmBhCC,EAAkB,uCAAG,qCAAAhB,EAAA,6DAChCiB,EADgC,EAChCA,OACAL,EAFgC,EAEhCA,SACAM,EAHgC,EAGhCA,WAEAC,QAAQC,IAAI,CACVH,SACAL,WACAM,eAEEG,EAV4B,6CAUqBJ,EAVrB,KAW5BL,IAAUS,GAAQ,mBAAgBT,EAAhB,MACtBS,GAAQ,qBAAkBH,GAZM,SAeNX,MAAMc,GAfA,8BAeWb,OAfX,cAe1BC,EAf0B,yBAiBzBA,EAAKa,QAAQlC,KAAI,SAACP,GACvB,ID5DyBgB,EC4DrBe,EAAW/B,EAAS+B,SAKxB,OAJIA,EAASE,QAAQ,OAAS,IAC5BF,EAAWV,EAAWU,EAAU,OAG3B,2BACF/B,GADL,IAEE+B,WACApB,QDpEuBK,ECoEF,GAAD,mBACfhB,EAAS0C,mBADM,CAElB1C,EAAS2C,iBDtE6B3B,EAAME,MAAK,kBAAM0B,KAAKC,SAAW,aC0C7C,4CAAH,sD,43CCzCxB,IAAMC,EAAcC,YAAH,IAKIC,KAafzD,EAAUC,IAAOC,IAAV,K,uVCnBb,IAAMF,EAAUC,IAAOC,IAAV,KCSPwD,EAAgC,SAAC,GAKvC,IAJLC,EAII,EAJJA,eACAC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,KAEIC,EAAgB,CAAC,GAAI,GAAI,IAAI/C,KAAI,SAAA6B,GAAM,OACzC,4BAAQ1B,IAAK0B,EAAQtB,MAAOsB,GAASA,MAEnCmB,EAAkBF,EAAK9C,KAAI,gBAAGiD,EAAH,EAAGA,GAAIxB,EAAP,EAAOA,KAAP,OAC7B,4BAAQtB,IAAK8C,EAAI1C,MAAO0C,GAAKxB,MAEzByB,EAAoBvB,EAAW3B,KAAI,SAAA8B,GAAU,OACjD,4BAAQ3B,IAAK2B,EAAYvB,MAAOuB,GAAaA,EAAWqB,kBAG1D,OACE,kBAAC,EAAD,KACE,2BACE,sDACA,4BAAQC,SAAUT,GAAiBI,IAErC,2BACE,8CACA,4BAAQK,SAAUR,GAChB,4BAAQrC,MAAO,GAAf,OACCyC,IAGL,2BACE,gDACA,4BAAQI,SAAUP,GAAqBK,MCyEhCG,EAtGH,WAAO,IAAD,EACoBC,oBAAS,GAD7B,mBACTC,EADS,KACGC,EADH,OAEkBF,oBAAS,GAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGYJ,mBAAS,IAHrB,mBAGTzB,EAHS,KAGD8B,EAHC,OAIgBL,mBAAS,GAJzB,mBAIT9B,EAJS,KAICoC,EAJD,OAKwBN,mBAAqB,IAL7C,mBAKTO,EALS,KAKKC,EALL,OAMoBR,mBAAS,QAN7B,mBAMTxB,EANS,KAMGiC,EANH,OAOYT,mBAAS,GAPrB,mBAOTU,EAPS,KAODC,EAPC,OAQkBX,mBAA0B,IAR5C,mBAQTY,EARS,KAQEC,EARF,OASUb,mBAAS,GATnB,mBASTc,EATS,KASFC,EATE,OAUsBf,mBAAmB,IAVzC,mBAUTgB,EAVS,KAUIC,EAVJ,KAYhBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAa,uCAAG,4BAAA7D,EAAA,sEACKM,IADL,OACdwD,EADc,OAGpBZ,EAAgBY,GAHI,2CAAH,qDAMbC,EAAW,uCAAG,4BAAA/D,EAAA,yDACboD,EADa,wBAEhBN,GAAa,GACbF,GAAc,GAHE,SAKW5B,EAAmB,CAC5CC,SACAL,WACAM,eARc,OAKV8C,EALU,OAWhBT,EAAaS,GACbP,EAAS,GACTE,EAAe,IACfb,GAAa,GAdG,wBAgBhBF,GAAc,GACdG,EAAU,IACVC,EAAY,GACZG,EAAc,QACdE,EAAU,GACVI,EAAS,GArBO,4CAAH,qDA4CjB,OACE,oCACE,kBAAC9B,EAAD,MACA,kBAAC,EAAD,KACE,4CACEgB,GAAce,EAAYO,SAAWhD,IACrC,4BAAQhC,UAAU,QAAQS,QAASqE,GAAeX,EAAmB,WAAV,UAE3DT,GAAc,uBAAG1D,UAAU,SAAb,UAA6BuE,IAC3Cb,IAAeE,GAAa,uBAAG5D,UAAU,YAAb,aAAmCqE,EAAUF,GAAQxC,UAClFiC,GAAa,oDACbF,EACC,kBAAC,EAAD,CACET,KAAMe,EACNlB,eAAgB,SAAAmC,GAAC,OAAInB,EAAUoB,SAASD,EAAEE,OAAOzE,SACjDqC,iBAAkB,SAAAkC,GAAC,OAAIlB,EAAYmB,SAASD,EAAEE,OAAOzE,SACrDsC,mBAAoB,SAAAiC,GAAC,OAAIf,EAAce,EAAEE,OAAOzE,WAE/CkD,GACH,kBAAC,EAAD,CACElE,SAvCU,SAACuF,GACnB,IAAKvB,EAAY,CACf,IAAMnD,EAAS0E,EAAEG,cAAc1E,MACzBnB,EAAY8E,EAAUF,GAAQ5B,iBAAmBhC,EACnDhB,GAAWiF,GAAS,SAAAa,GAAI,OAAIA,EAAO,KAEvC,IAAMC,EAAe,CACnB/E,SACAF,cAAegE,EAAUF,GAAQ5B,eACjChD,YACAK,SAAUyE,EAAUF,GAAQvE,UAG9B8E,GAAe,SAAAW,GAAI,4BAAQA,GAAR,CAAcC,SA2B3B3F,QAAS0E,EAAUF,GAAQ5D,OAC3BX,SAAUyE,EAAUF,GAAQvE,SAC5BC,WAAYsE,EAAS,EACrBrE,eAAgBkC,EAChBjC,WAAY0E,EAAcA,EAAYN,QAAUoB,KAGlD7B,IAAeE,GAAca,EAAYO,SAAWb,EAAS,GAAOA,IAAWnC,EAAS,GACxF,4BAAQhC,UAAU,OAAOS,QA/BZ,kBAAM2D,EAAUD,EAAS,KA+BtC,WCxGVqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ca741d14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/koes-nadi.9d2a7e67.jpg\";","import styled from \"styled-components\"\r\n\r\ntype ButtonWrapperProps = {\r\n  isCorrect: boolean\r\n  isClicked: boolean\r\n}\r\n\r\nexport const Wrapper = styled.div`\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  max-width: 1100px;\r\n  padding: 20px;\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    background: ${({isCorrect, isClicked}: ButtonWrapperProps) =>\r\n      isCorrect\r\n        ? \"linear-gradient(90deg, #56ffa4, #59bc96)\"\r\n        : !isCorrect && isClicked\r\n          ? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n          : \"linear-gradient(90deg, #56ccff, #63afb4)\"};\r\n    border: 3px solid #fff;\r\n    border-radius: 10px;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    color: #000;\r\n    cursor: pointer;\r\n    font-size: 0.8rem;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\r\n    user-select: none;\r\n    width: 100%;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Answer } from \"../App\"\r\nimport { ButtonWrapper, Wrapper } from \"./QuestionCard.styles\"\r\n\r\ntype Props = {\r\n  callback:       (e: React.MouseEvent<HTMLButtonElement>) => void\r\n  choices:        string[]\r\n  question:       string\r\n  questionNo:     number\r\n  totalQuestions: number\r\n  userAnswer?:    Answer\r\n}\r\n\r\nexport const QuestionCard: React.FC<Props> = ({\r\n  callback,\r\n  choices,\r\n  question,\r\n  questionNo,\r\n  totalQuestions,\r\n  userAnswer,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNo} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }} />\r\n    <div>\r\n      {choices.map(choice => (\r\n        <ButtonWrapper\r\n          isCorrect={userAnswer?.correctAnswer === choice}\r\n          key={choice}\r\n          isClicked={userAnswer?.answer === choice} >\r\n            <button disabled={!!userAnswer} onClick={callback} value={choice}>\r\n              <span dangerouslySetInnerHTML={{ __html: choice }} />\r\n            </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n)\r\n","export const sortArray = (array: any[], prop: string) => array.sort((a, b) => (a[prop] > b[prop] ? 1 : -1))\r\n\r\nexport const shuffleArray = (array: any[]) => array.sort(() => Math.random() - 0.5)\r\n\r\nexport const trimString = (string: string, trim: string) => string.split(trim)[1]\r\n","import { sortArray, shuffleArray, trimString } from \"./utils\"\r\n\r\nexport type Category = {\r\n  id:   number\r\n  name: string\r\n}\r\n\r\nexport const fetchQuizCategories = async () => {\r\n  const endpoint = \"https://opentdb.com/api_category.php\"\r\n  const data = await (await fetch(endpoint)).json()\r\n  const categoryArray: Category[] = data.trivia_categories.map((category: Category) => {\r\n    let name = category.name\r\n    if (name.indexOf(\": \") > -1) {\r\n      name = trimString(name, \": \")\r\n    }\r\n\r\n    return {\r\n      ...category,\r\n      name\r\n    }\r\n  })\r\n\r\n  return sortArray(categoryArray, \"name\")\r\n}\r\n\r\nexport const Difficulty = [\"easy\", \"medium\", \"hard\"]\r\n\r\nexport type Question = {\r\n  category:          string\r\n  correct_answer:    string\r\n  difficulty:        string\r\n  incorrect_answers: string[]\r\n  question:          string\r\n  type:              string\r\n}\r\n\r\nexport type QuestionState = Question & { answer: string[] }\r\n\r\nexport type QuizQuestions = {\r\n  amount:     number\r\n  category:   number\r\n  difficulty: string\r\n}\r\n\r\nexport const fetchQuizQuestions = async ({\r\n  amount,\r\n  category,\r\n  difficulty\r\n}: QuizQuestions) => {\r\n  console.log({\r\n    amount,\r\n    category,\r\n    difficulty\r\n  })\r\n  let endpoint = `https://opentdb.com/api.php?amount=${amount}&`\r\n  if (category) endpoint += `category=${category}&`\r\n  endpoint += `difficulty=${difficulty}`\r\n  // const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}`\r\n  // const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n  const data = await (await fetch(endpoint)).json()\r\n\r\n  return data.results.map((question: Question) => {\r\n    let category = question.category\r\n    if (category.indexOf(\": \") > -1) {\r\n      category = trimString(category, \": \")\r\n    }\r\n\r\n    return {\r\n      ...question,\r\n      category,\r\n      answer: shuffleArray([\r\n        ...question.incorrect_answers,\r\n        question.correct_answer\r\n      ])\r\n    }\r\n  })\r\n}\r\n","import styled, { createGlobalStyle } from \"styled-components\"\r\nimport BGImage from \"./images/koes-nadi.jpg\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n  }\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: \"Catamaran\", sans-serif;\r\n  }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score, .category {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    background-clip: text;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    background-size: 100%;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-family: \"Fascinate Inline\", cursive;\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    margin: 20px;\r\n    text-align: center;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n  .start, .next {\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    border-radius: 10px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    cursor: pointer;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n`\r\n","import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.div`\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  max-width: 1100px;\r\n  padding: 20px;\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n    label, select {\r\n      width: 100%;\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Category, Difficulty } from \"../Api\"\r\nimport { Wrapper } from \"./CategoryCard.styles\"\r\n\r\ntype Props = {\r\n  amountOnChange:     (e: React.ChangeEvent<HTMLSelectElement>) => void\r\n  categoryOnChange:   (e: React.ChangeEvent<HTMLSelectElement>) => void\r\n  difficultyOnChange: (e: React.ChangeEvent<HTMLSelectElement>) => void\r\n  list:               Category[]\r\n}\r\n\r\nexport const CategoryCard: React.FC<Props> = ({\r\n  amountOnChange,\r\n  categoryOnChange,\r\n  difficultyOnChange,\r\n  list\r\n}) => {\r\n  let amountOptions = [10, 15, 20].map(amount => (\r\n    <option key={amount} value={amount}>{amount}</option>\r\n  ))\r\n  let categoryOptions = list.map(({ id, name }) => (\r\n    <option key={id} value={id}>{name}</option>\r\n  ))\r\n  const difficultyOptions = Difficulty.map(difficulty => (\r\n    <option key={difficulty} value={difficulty}>{difficulty.toUpperCase()}</option>\r\n  ))\r\n\r\n  return (\r\n    <Wrapper>\r\n      <p>\r\n        <label>No. of Questions : </label>\r\n        <select onChange={amountOnChange}>{amountOptions}</select>\r\n      </p>\r\n      <p>\r\n        <label>Category : </label>\r\n        <select onChange={categoryOnChange}>\r\n          <option value={0}>Any</option>\r\n          {categoryOptions}\r\n        </select>\r\n      </p>\r\n      <p>\r\n        <label>Difficulty : </label>\r\n        <select onChange={difficultyOnChange}>{difficultyOptions}</select>\r\n      </p>\r\n    </Wrapper>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { QuestionCard } from \"./components/QuestionCard\"\r\nimport { Category, QuestionState, fetchQuizCategories, fetchQuizQuestions } from \"./Api\"\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\"\r\nimport { CategoryCard } from \"./components/CategoryCard\"\r\n\r\nexport type Answer = {\r\n  answer:        string\r\n  correctAnswer: string\r\n  isCorrect:     boolean\r\n  question:      string\r\n}\r\n\r\nconst App = () => {\r\n  const [isGameOver, setIsGameOver] = useState(true)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [amount, setAmount] = useState(10)\r\n  const [category, setCategory] = useState(0)\r\n  const [categoryList, setCategoryList] = useState<Category[]>([])\r\n  const [difficulty, setDifficulty] = useState(\"easy\")\r\n  const [number, setNumber] = useState(0)\r\n  const [questions, setQuestions] = useState<QuestionState[]>([])\r\n  const [score, setScore] = useState(0)\r\n  const [userAnswers, setUserAnswers] = useState<Answer[]>([])\r\n\r\n  useEffect(() => {\r\n    getCategories()\r\n  }, [])\r\n\r\n  const getCategories = async () => {\r\n    const categories = await fetchQuizCategories()\r\n\r\n    setCategoryList(categories)\r\n  }\r\n\r\n  const startTrivia = async () => {\r\n    if (!number) {\r\n      setIsLoading(true)\r\n      setIsGameOver(false)\r\n\r\n      const newQuestions = await fetchQuizQuestions({\r\n        amount,\r\n        category,\r\n        difficulty\r\n      })\r\n\r\n      setQuestions(newQuestions)\r\n      setScore(0)\r\n      setUserAnswers([])\r\n      setIsLoading(false)\r\n    } else {\r\n      setIsGameOver(true)\r\n      setAmount(10)\r\n      setCategory(0)\r\n      setDifficulty(\"easy\")\r\n      setNumber(0)\r\n      setScore(0)\r\n    }\r\n  }\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!isGameOver) {\r\n      const answer = e.currentTarget.value\r\n      const isCorrect = questions[number].correct_answer === answer\r\n      if (isCorrect) setScore(prev => prev + 1)\r\n\r\n      const answerObject = {\r\n        answer,\r\n        correctAnswer: questions[number].correct_answer,\r\n        isCorrect,\r\n        question: questions[number].question\r\n      }\r\n\r\n      setUserAnswers(prev => [...prev, answerObject])\r\n    }\r\n  }\r\n\r\n  const nextQuestion = () => setNumber(number + 1)\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper>\r\n        <h1>TRIVIA QUIZ</h1>\r\n        {(isGameOver || userAnswers.length === amount) && (\r\n          <button className=\"start\" onClick={startTrivia}>{!number ? \"Start\" : \"New Game\"}</button>\r\n        )}\r\n        {!isGameOver && <p className=\"score\">Score: {score}</p>}\r\n        {!isGameOver && !isLoading && <p className=\"category\">Category: {questions[number].category}</p>}\r\n        {isLoading && <p>Loading Questions ...</p>}\r\n        {isGameOver ? (\r\n          <CategoryCard\r\n            list={categoryList}\r\n            amountOnChange={e => setAmount(parseInt(e.target.value))}\r\n            categoryOnChange={e => setCategory(parseInt(e.target.value))}\r\n            difficultyOnChange={e => setDifficulty(e.target.value)}\r\n          />\r\n        ) : !isLoading && (\r\n          <QuestionCard\r\n            callback={checkAnswer}\r\n            choices={questions[number].answer}\r\n            question={questions[number].question}\r\n            questionNo={number + 1}\r\n            totalQuestions={amount}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n          />\r\n        )}\r\n        {!isGameOver && !isLoading && (userAnswers.length === number + 1) && (number !== amount - 1) && (\r\n          <button className=\"next\" onClick={nextQuestion}>Next</button>\r\n        )}\r\n      </Wrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport App from \"./App\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}